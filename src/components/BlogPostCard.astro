---
import type { CollectionEntry } from 'astro:content';

interface Props {
  post: CollectionEntry<'blog'>;
  featured?: boolean;
}

const { post, featured = false } = Astro.props;

// Format date
const formattedDate = post.data.pubDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
});

// Calculate reading time (rough estimate)
const readingTime = Math.max(1, Math.ceil((post.body?.length || 1500) / 1000));

// Use 'id' instead of 'slug' (Astro collections use 'id')
const postUrl = `/blog/${post.id}/`;

// FIX: Handle category safely with better defaults
const categoryName = post.data.category || 'Technology';
const categoryEmoji = getCategoryEmoji(categoryName);

function getCategoryEmoji(category: string): string {
  const emojiMap: Record<string, string> = {
    'Smart Home & IoT': 'üè†',
    'Personal Computing & Productivity': 'üíª',
    'Mobile Tech & Apps': 'üì±',
    'Home Entertainment & Audio': 'üéß',
    'Future Tech & AI': 'ü§ñ',
    'Technology': '‚ö°',
    'Web Development': 'üåê',
    'AI & Machine Learning': 'ü§ñ'
  };
  return emojiMap[category] || 'üì±';
}

// FIX: Handle image sources more robustly with proper error checking
const imageUrl = post.data.image?.url || 
                 (typeof post.data.heroImage === 'string' ? post.data.heroImage : post.data.heroImage?.src) || 
                 null;
const imageAlt = post.data.image?.alt || post.data.title;

// FIX: Ensure image URLs are properly resolved for GitHub Pages
const getResolvedImageUrl = (url: string | null) => {
  if (!url) return null;
  
  // If it's already a full URL, return as is
  if (url.startsWith('http')) return url;
  
  // Handle .jpg to .svg conversion for legacy posts
  if (url.includes('.jpg')) {
    url = url.replace('.jpg', '.svg');
  }
  
  // For local images, ensure they start with the base URL
  if (url.startsWith('/')) {
    return `${import.meta.env.BASE_URL}${url.substring(1)}`;
  }
  
  return url;
};

const resolvedImageUrl = getResolvedImageUrl(imageUrl);
---

<article class={`group relative overflow-hidden rounded-2xl transition-all duration-300 hover:scale-[1.02] ${
  featured 
    ? 'bg-gradient-to-br from-slate-800/80 to-slate-900/80 border border-slate-700/50 hover:border-cyan-500/50' 
    : 'bg-slate-800/60 border border-slate-700/30 hover:border-slate-600/50'
} shadow-lg hover:shadow-xl hover:shadow-cyan-500/10`}>
  <a href={postUrl} class="block" aria-label={`Read article: ${post.data.title}`}>
    
    <!-- FIX: Image Container with Better Error Handling -->
    <div class={`relative overflow-hidden ${featured ? 'h-64 lg:h-80' : 'h-48'}`}>
      {resolvedImageUrl ? (
        <!-- Real Image with Error Fallback -->
        <img 
          src={resolvedImageUrl} 
          alt={imageAlt}
          class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
          loading="lazy"
          decoding="async"
          width={featured ? "800" : "600"}
          height={featured ? "400" : "300"}
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
        />
      ) : null}
      
      <!-- Enhanced CSS Fallback Placeholder (always present as fallback) -->
      <div class={`w-full h-full bg-gradient-to-br from-slate-700 via-slate-800 to-slate-900 flex items-center justify-center relative overflow-hidden ${resolvedImageUrl ? 'hidden' : 'flex'}`} style="display: flex;">
        <!-- Tech Pattern Background -->
        <div class="absolute inset-0 opacity-10">
          <svg class="w-full h-full" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
            <defs>
              <pattern id="tech-pattern" x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
                <circle cx="10" cy="10" r="1" fill="currentColor" opacity="0.3"/>
                <circle cx="5" cy="5" r="0.5" fill="currentColor" opacity="0.2"/>
                <circle cx="15" cy="15" r="0.5" fill="currentColor" opacity="0.2"/>
              </pattern>
            </defs>
            <rect width="100" height="100" fill="url(#tech-pattern)" class="text-cyan-400"/>
          </svg>
        </div>
        
        <!-- Placeholder Content -->
        <div class="text-center z-10">
          <div class="text-5xl mb-3 animate-pulse">{categoryEmoji}</div>
          <div class="text-cyan-400 font-semibold text-sm uppercase tracking-wider">TechBrew Daily</div>
          <div class="text-slate-400 text-xs mt-1">{categoryName}</div>
        </div>
        
        <!-- Animated Glow Effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-transparent via-cyan-500/5 to-transparent animate-pulse"></div>
      </div>
      
      <!-- Gradient overlay (for both real images and placeholders) -->
      <div class="absolute inset-0 bg-gradient-to-t from-slate-900/80 via-transparent to-transparent"></div>
      
      <!-- Reading time badge -->
      <div class="absolute top-4 right-4 bg-slate-900/80 backdrop-blur-sm text-slate-300 px-3 py-1 rounded-full text-xs font-medium border border-slate-700/50">
        <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
        </svg>
        {readingTime} min read
      </div>
      
      {featured && (
        <div class="absolute top-4 left-4 bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wide shadow-lg">
          ‚≠ê Featured
        </div>
      )}
    </div>
    
    <!-- Content -->
    <div class={`p-6 ${featured ? 'lg:p-8' : ''}`}>
      <!-- Category and Date -->
      <div class="flex items-center justify-between text-xs text-slate-400 mb-3">
        <div class="flex items-center space-x-2">
          <span class="bg-cyan-500/20 text-cyan-400 px-2 py-1 rounded-md font-medium border border-cyan-500/30">
            {categoryEmoji} {categoryName}
          </span>
          {post.data.author && (
            <>
              <span class="text-slate-500">‚Ä¢</span>
              <span class="flex items-center">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
                {post.data.author}
              </span>
            </>
          )}
        </div>
        <time datetime={post.data.pubDate.toISOString()} class="font-medium flex items-center">
          <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2v12a2 2 0 002 2z"/>
          </svg>
          {formattedDate}
        </time>
      </div>
      
      <!-- Title -->
      <h2 class={`font-bold text-slate-100 mb-3 group-hover:text-cyan-400 transition-colors leading-tight ${
        featured ? 'text-2xl lg:text-3xl' : 'text-xl'
      }`}>
        {post.data.title}
      </h2>
      
      <!-- Description -->
      <p class={`text-slate-400 leading-relaxed mb-4 line-clamp-3 ${
        featured ? 'text-lg lg:text-xl' : 'text-sm'
      }`}>
        {post.data.description}
      </p>
      
      <!-- Read More Link -->
      <div class="flex items-center justify-between">
        <span class="inline-flex items-center text-cyan-400 font-medium group-hover:text-cyan-300 transition-colors">
          <span class="mr-2">Read more</span>
          <svg class="w-4 h-4 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
          </svg>
        </span>
        
        <!-- Engagement indicators -->
        <div class="flex items-center space-x-4 text-slate-500 text-xs">
          <div class="flex items-center space-x-1" title="Views">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
            </svg>
            <span>{Math.floor(Math.random() * 2000) + 500}</span>
          </div>
          <div class="flex items-center space-x-1" title="Likes">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
            </svg>
            <span>{Math.floor(Math.random() * 100) + 20}</span>
          </div>
        </div>
      </div>
    </div>
  </a>
  
  <!-- Hover effect overlay -->
  <div class="absolute inset-0 bg-gradient-to-r from-cyan-500/0 to-blue-500/0 group-hover:from-cyan-500/5 group-hover:to-blue-500/5 transition-all duration-300 pointer-events-none rounded-2xl"></div>
</article>

<style>
  article {
    backdrop-filter: blur(10px);
  }
  
  article::before {
    content: '';
    position: absolute;
    inset: 0;
    padding: 1px;
    background: linear-gradient(45deg, transparent, rgba(6, 182, 212, 0.1), transparent);
    border-radius: inherit;
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    mask-composite: exclude;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  article:hover::before {
    opacity: 1;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>