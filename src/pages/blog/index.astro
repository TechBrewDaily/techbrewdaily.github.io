---
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';
import BlogPostCard from '../../components/BlogPostCard.astro';
import { CATEGORIES } from '../../consts';

const allPosts = await getCollection('blog');
const sortedPosts = allPosts.sort(
    (a, b) => new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);

// Pagination setup
const postsPerPage = 12;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
const currentPage = 1;
const paginatedPosts = sortedPosts.slice(0, postsPerPage);

// Calculate category counts for filters
const categoryStats = CATEGORIES.map(category => ({
    ...category,
    count: allPosts.filter(post => 
        (post.data.category || 'Technology') === category.name
    ).length
}));
---

<MainLayout 
    title="All Blog Posts" 
    description="Explore all our technology articles, reviews, and insights. Stay updated with the latest in tech, AI, and digital innovation."
>
    <!-- Header Section -->
    <section class="py-12 mb-16">
        <div class="text-center">
            <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold mb-6">
                <span class="bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-600 bg-clip-text text-transparent">
                    Tech Insights & Analysis
                </span>
            </h1>
            <p class="text-xl text-slate-400 max-w-3xl mx-auto mb-8">
                Dive deep into the world of technology with our comprehensive articles, expert reviews, and latest industry trends
            </p>
            
            <!-- Stats -->
            <div class="flex flex-wrap justify-center gap-8 text-center">
                <div class="bg-slate-800/50 rounded-xl p-4 min-w-[120px]">
                    <div class="text-2xl font-bold text-cyan-400">{sortedPosts.length}</div>
                    <div class="text-sm text-slate-400">Articles</div>
                </div>
                <div class="bg-slate-800/50 rounded-xl p-4 min-w-[120px]">
                    <div class="text-2xl font-bold text-blue-400">{CATEGORIES.length}</div>
                    <div class="text-sm text-slate-400">Categories</div>
                </div>
                <div class="bg-slate-800/50 rounded-xl p-4 min-w-[120px]">
                    <div class="text-2xl font-bold text-purple-400">50K+</div>
                    <div class="text-sm text-slate-400">Readers</div>
                </div>
            </div>
        </div>
    </section>

    <!-- Filters Section -->
    <section class="mb-12">
        <div class="flex flex-wrap gap-4 justify-center">
            <button class="filter-btn active" data-category="all">
                All Posts ({sortedPosts.length})
            </button>
            {categoryStats.map(category => (
                <button class="filter-btn" data-category={category.slug}>
                    {category.emoji} {category.name} ({category.count})
                </button>
            ))}
        </div>
    </section>

    <!-- Search Section -->
    <section class="mb-16">
        <div class="max-w-md mx-auto">
            <div class="relative">
                <input 
                    type="text" 
                    placeholder="Search articles..."
                    class="w-full px-4 py-3 pl-12 rounded-xl bg-slate-800 border border-slate-700 text-slate-100 placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent transition-all"
                    id="search-input"
                />
                <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                </svg>
            </div>
        </div>
    </section>

    <!-- Posts Grid -->
    <section class="mb-16">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="posts-grid">
            {paginatedPosts.map((post, index) => (
                <div class="animate-fade-in-up post-item" 
                     style={`animation-delay: ${index * 0.05}s`} 
                     data-category="all"
                     data-category-slug={CATEGORIES.find(c => c.name === (post.data.category || 'Technology'))?.slug || 'technology'}
                     data-title={post.data.title.toLowerCase()}
                     data-description={post.data.description.toLowerCase()}>
                    <BlogPostCard post={post} />
                </div>
            ))}
        </div>
        
        <!-- No results message -->
        <div id="no-results" class="hidden text-center py-16">
            <svg class="w-16 h-16 text-slate-600 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.29-1.009-5.824-2.562M15 9.34c-.665-.295-1.405-.034-1.405-.034A5.5 5.5 0 009.5 12.5c0 1.381.559 2.628 1.462 3.535"/>
            </svg>
            <h3 class="text-xl font-semibold text-slate-400 mb-2">No articles found</h3>
            <p class="text-slate-500">Try adjusting your search or filter criteria</p>
        </div>
    </section>

    <!-- Pagination -->
    {totalPages > 1 && (
        <section class="text-center" id="pagination-section">
            <nav class="inline-flex items-center space-x-2">
                <button id="prev-btn" class="btn-pagination" disabled>
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                    </svg>
                    Previous
                </button>
                
                <div id="page-numbers" class="flex items-center space-x-2">
                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => i + 1).map(page => (
                        <button class={`btn-pagination page-btn ${
                            page === currentPage 
                                ? 'active' 
                                : ''
                        }`} data-page={page}>
                            {page}
                        </button>
                    ))}
                </div>
                
                <button id="next-btn" class="btn-pagination">
                    Next
                    <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                    </svg>
                </button>
            </nav>
        </section>
    )}

    <!-- Newsletter CTA -->
    <section class="py-20 mt-20 bg-gradient-to-r from-cyan-500/10 via-blue-500/10 to-purple-500/10 rounded-3xl text-center">
        <div class="max-w-2xl mx-auto">
            <h2 class="text-3xl md:text-4xl font-bold mb-4">
                Stay Updated
            </h2>
            <p class="text-slate-400 mb-8 text-lg">
                Get notified when we publish new articles and insights
            </p>
            <div class="flex flex-col sm:flex-row gap-4 max-w-md mx-auto">
                <input 
                    type="email" 
                    placeholder="Enter your email"
                    class="flex-1 px-4 py-3 rounded-lg bg-slate-800 border border-slate-700 text-slate-100 placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-transparent"
                />
                <button class="btn-primary whitespace-nowrap">
                    Subscribe
                </button>
            </div>
        </div>
    </section>

    <!-- Ad Space Placeholder -->
    <section class="py-8 mt-16">
        <div class="bg-slate-800/30 border-2 border-dashed border-slate-700 rounded-xl p-8 text-center">
            <div class="text-slate-500 mb-2">
                <svg class="w-12 h-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 2v12a1 1 0 001 1h8a1 1 0 001 1V6M9 8h6"/>
                </svg>
            </div>
            <h3 class="text-lg font-medium text-slate-400 mb-2">Advertisement Space</h3>
            <p class="text-sm text-slate-500">Leaderboard ad placement (728x90)</p>
        </div>
    </section>
</MainLayout>

<style>
    .filter-btn {
        @apply px-4 py-2 rounded-full bg-slate-800 text-slate-400 hover:bg-slate-700 hover:text-slate-300 transition-all duration-200 border border-slate-700 text-sm;
    }
    
    .filter-btn.active {
        @apply bg-gradient-to-r from-cyan-500 to-blue-500 text-white border-transparent;
    }
    
    .btn-pagination {
        @apply px-4 py-2 rounded-lg font-medium transition-all duration-200 inline-flex items-center;
        background: var(--bg-card);
        color: var(--text-secondary);
        border: 1px solid var(--border);
    }
    
    .btn-pagination:hover:not(:disabled) {
        background: var(--bg-card-hover);
        color: var(--text-primary);
        border-color: var(--accent);
        transform: translateY(-1px);
    }
    
    .btn-pagination.active {
        background: var(--gradient-primary);
        color: white;
        border-color: transparent;
        box-shadow: var(--shadow-lg);
    }
    
    .btn-pagination:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .animate-fade-in-up {
        opacity: 0;
        transform: translateY(20px);
        animation: fadeInUp 0.6s ease-out forwards;
    }
    
    @keyframes fadeInUp {
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    // Search and filter functionality
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const postsGrid = document.getElementById('posts-grid') as HTMLElement;
    const noResults = document.getElementById('no-results') as HTMLElement;
    const filterButtons = document.querySelectorAll('.filter-btn') as NodeListOf<HTMLButtonElement>;
    
    // Pagination elements
    const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
    const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
    const pageButtons = document.querySelectorAll('.page-btn') as NodeListOf<HTMLButtonElement>;
    
    let currentFilter = 'all';
    let currentPage = 1;
    const postsPerPage = 12;
    let filteredPosts: HTMLElement[] = [];
    
    // Get all posts
    function getAllPosts(): HTMLElement[] {
        return Array.from(postsGrid.querySelectorAll('.post-item')) as HTMLElement[];
    }
    
    // Filter posts function
    function filterPosts() {
        if (!searchInput || !postsGrid || !noResults) return;
        
        const searchTerm = searchInput.value.toLowerCase();
        const allPosts = getAllPosts();
        filteredPosts = [];
        
        allPosts.forEach(post => {
            const title = post.getAttribute('data-title') || '';
            const description = post.getAttribute('data-description') || '';
            const categorySlug = post.getAttribute('data-category-slug') || '';
            
            const matchesSearch = !searchTerm || 
                                title.includes(searchTerm) || 
                                description.includes(searchTerm);
            const matchesCategory = currentFilter === 'all' || categorySlug === currentFilter;
            
            if (matchesSearch && matchesCategory) {
                filteredPosts.push(post);
            }
        });
        
        // Reset to first page when filtering
        currentPage = 1;
        updatePagination();
        showCurrentPage();
    }
    
    // Show current page posts
    function showCurrentPage() {
        const allPosts = getAllPosts();
        const startIndex = (currentPage - 1) * postsPerPage;
        const endIndex = startIndex + postsPerPage;
        
        // Hide all posts first
        allPosts.forEach(post => {
            post.style.display = 'none';
        });
        
        // Show only current page posts
        const currentPagePosts = filteredPosts.slice(startIndex, endIndex);
        currentPagePosts.forEach(post => {
            post.style.display = 'block';
        });
        
        // Show/hide no results message
        if (filteredPosts.length === 0) {
            noResults.classList.remove('hidden');
        } else {
            noResults.classList.add('hidden');
        }
    }
    
    // Update pagination controls
    function updatePagination() {
        const totalPages = Math.ceil(filteredPosts.length / postsPerPage);
        
        // Update previous button
        if (prevBtn) {
            prevBtn.disabled = currentPage === 1;
        }
        
        // Update next button
        if (nextBtn) {
            nextBtn.disabled = currentPage === totalPages || totalPages === 0;
        }
        
        // Update page buttons
        pageButtons.forEach(btn => {
            const page = parseInt(btn.getAttribute('data-page') || '1');
            btn.classList.toggle('active', page === currentPage);
            btn.style.display = page <= totalPages ? 'inline-flex' : 'none';
        });
    }
    
    // Event listeners
    searchInput?.addEventListener('input', filterPosts);
    
    // Filter button handlers
    filterButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Update active state
            filterButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            
            // Update current filter
            currentFilter = button.getAttribute('data-category') || 'all';
            
            // Filter posts
            filterPosts();
        });
    });
    
    // Pagination handlers
    prevBtn?.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            updatePagination();
            showCurrentPage();
        }
    });
    
    nextBtn?.addEventListener('click', () => {
        const totalPages = Math.ceil(filteredPosts.length / postsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            updatePagination();
            showCurrentPage();
        }
    });
    
    pageButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            const page = parseInt(btn.getAttribute('data-page') || '1');
            currentPage = page;
            updatePagination();
            showCurrentPage();
        });
    });
    
    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        filterPosts(); // Initialize with all posts
    });
</script>